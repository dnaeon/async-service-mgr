#!/usr/bin/env python
#
# Copyright (c) 2014 Marin Atanasov Nikolov <dnaeon@gmail.com>
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer
#    in this position and unchanged.
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE AUTHOR(S) ``AS IS'' AND ANY EXPRESS OR
# IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
# OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
# IN NO EVENT SHALL THE AUTHOR(S) BE LIABLE FOR ANY DIRECT, INDIRECT,
# INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
# NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
# THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
# THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

"""
Service Manager Client application

The client application of Service Manager is used for
sending out service requests to a Service Manager daemon.

"""

import json
import logging

from docopt import docopt
from service.client import ServiceManagerClient

def main():

    usage="""
Usage:
  service-mgr-client [-w <waittime>] [-r <retries>] [-t <timeout>] [-D] -e <endpoint> -T <topic> -c <cmd> -s <service>
  service-mgr-client --help
  service-mgr-client --version

Options:
  -h, --help                             Display this usage info
  -v, --version                          Display version and exit
  -r <retries>, --retries <retries>      Number of times to retry if a request times out
                                         [default: 3]
  -t <timeout>, --timeout <timeout>      Timeout after that period of milliseconds 
                                         [default: 1000]
  -w <waittime>, --wait-time <waittime>  Wait that number of seconds for results
                                         from the Service Manager Result Publisher
                                         [default: 0.1]
  -D, --debug                            Run Service Manager Client in debug mode
  -e <endpoint>, --endpoint <endpoint>   Endpoint of the Service Manager to send the request to
                                         [default: tcp://localhost:5500]
  -T <topic>, --topic <topic>            Topic of the message to use
  -c <cmd>, --cmd <cmd>                  Service command, e.g. 'start', 'status', 'stop', etc.
  -s <service>, --service <service>      Name of the service to perform the operation on

"""

    args = docopt(usage, version="0.1.0")

    level = logging.DEBUG if args['--debug'] else logging.INFO

    logging.basicConfig(
        format='%(asctime)s - %(levelname)s - service-mgr-client[%(process)s]: %(message)s',
        level=level
    )
   
    # Message we send out to the Service Manager
    msg = {
        'cmd':     args['--cmd'],
        'topic':   args['--topic'],
        'service': args['--service'],
    }

    # Acquire a service request id from Service Manager
    client = ServiceManagerClient()
    result = client.simple_request(
        msg,
        endpoint=args['--endpoint'],
        timeout=int(args['--timeout']),
        retries=int(args['--retries'])
    )

    if not all(k in result for k in ('uuid', 'port')):
        logging.warn('Unable to acquire a service request id')
        raise SystemExit, result

    # Get the Service Manager host and transport
    # We will subscribe for messages on the Result Publisher on
    # successful service request id acquire
    transport = args['--endpoint'].split(':')[:2]
    transport.append(str(result['port']))
    publisher = ':'.join(transport)

    result = client.wait_for_publisher_msgs(
        endpoint=publisher,
        topic=result['uuid'],
        wait_time=float(args['--wait-time'])
    )

    print json.dumps(result, indent=4)

if __name__ == '__main__':
    main()

