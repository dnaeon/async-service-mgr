#!/usr/bin/env python
#
# Copyright (c) 2014 Marin Atanasov Nikolov <dnaeon@gmail.com>
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer
#    in this position and unchanged.
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE AUTHOR(S) ``AS IS'' AND ANY EXPRESS OR
# IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
# OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
# IN NO EVENT SHALL THE AUTHOR(S) BE LIABLE FOR ANY DIRECT, INDIRECT,
# INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
# NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
# THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
# THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

"""
Service Manager daemon

The Service Manager is the one that Service Manager Agents connect to.
It is responsible for dispatching service request message to any
connected Agents and collect results from the service request operations.

"""

import json
import logging
import ConfigParser

from docopt import docopt
from service.manager import ServiceManager
from service.client import ServiceManagerClient

def start(pidfile, daemon, **kwargs):
    """
    Start the Service Manager daemon

    Args:
        pidfile (string): Location to the daemon's pidfile
        daemon    (bool): If True daemonize the Service Manager

    """
    manager = ServiceManager(pidfile)

    if daemon:
        # Run as daemon
        manager.start(**kwargs)
    else:
        # Run in the foreground
        manager.run(**kwargs)

def stop(endpoint):
    """
    Stops the Service Manager daemon

    Args:
        endpoint (string): The endpoint we send the shutdown message to

    """
    # The message we send to initiate the shutdown sequence
    msg = { "cmd": "manager.shutdown" }

    # Send out our message
    client = ServiceManagerClient()

    result = client.simple_request(
        msg,
        endpoint=endpoint,
        timeout=1000,
        retries=3
    )
    
    return result

def status(endpoint):
    """
    Get status information from the Service Manager daemon

    Args:
        endpoint (string): The endpoint we send the status request to
    
    """
    # The message we send to get status information
    msg = { "cmd": "manager.status" }

    # Send out our message
    client = ServiceManagerClient()

    result = client.simple_request(
        msg,
        endpoint=endpoint,
        timeout=1000,
        retries=3
    )
    
    return result

def parse_conf(path):
    """
    Parses the Service Manager configuration file

    Args:
        path (str): Path to the Service Manager conf file

    Returns:
        A dict of the Service Manager config options

    """
    parser = ConfigParser.ConfigParser()
    parser.read(path)

    required_opts = (
        'frontend_endpoint',
        'backend_endpoint',
        'sink_endpoint',
        'mgmt_endpoint'
    )

    if not all(parser.has_option('Default', opt) for opt in required_opts):
        raise SystemExit, 'Missing or no configuration options in %s' % path

    return dict(parser.items('Default'))

def main():
    usage="""
Usage: service-mgrd [-d] [-D] [-p <pidfile>] [-f <config-file>] [-o <logfile>] start
       service-mgrd -e <endpoint> stop
       service-mgrd -e <endpoint> status
       service-mgrd --help
       service-mgrd --version

Arguments:
  start                                     Start the Service Manager
  stop                                      Stop the Service Manager
  status                                    Get status information

Options:
  -h, --help                                Display this usage info
  -v, --version                             Display version and exit
  -d, --daemon                              Start as a daemon, otherwise
                                            run in the foreground
  -D, --debug                               Run Service Manager daemon in debug mode
  -p <pidfile>, --pidfile <pidfile>         Specify pidfile file to use
                                            [default: /var/run/service-mgr/service-mgrd.pid]
  -f <config-file>, --file <config-file>    Specify config file to use
                                            [default: /etc/service-mgr/service-mgrd.conf]
  -e <endpoint>, --endpoint <endpoint>      Specify the endpoint we connect to
  -o <logfile>, --output <logfile>          Specify the log file to use

"""

    args = docopt(usage, version="0.1.0")

    level = logging.DEBUG if args['--debug'] else logging.INFO

    logging.basicConfig(filename=args['--output'],
                        format='%(asctime)s - %(levelname)s - service-mgrd[%(process)s]: %(message)s',
                        level=level)

    result = None
        
    if args["start"]:
        conf_options = parse_conf(args['--file'])
        start(args["--pidfile"], args["--daemon"], **conf_options)
    elif args["stop"]:
        result = stop(args["--endpoint"])
    elif args["status"]:
        result = status(args["--endpoint"])

    if result:
        print json.dumps(result, indent=4)
        
if __name__ == '__main__':
    main()

